# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build-backend:
    runs-on: ubuntu-latest
    # container:
    #   image: rust:latest
      
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      # - name: Export Tag
      #   run: |
      #     echo "RELEASE_TAG=${{ github.ref_name }}" >> "$GITHUB_ENV"

      # - name: Use Node.js 23.x
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: "23.x"
      #     cache-dependency-path: frontend/yarn.lock
      #     cache: 'yarn'
      
      - name: update rust
        run: rustup toolchain install stable --profile minimal --no-self-update

      - name: rust cache
#        uses: Swatinem/rust-cache@v2
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-

      - name: build
        run: cargo build --release
        
      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BACKEND
          path: |
            target/release/inventorize
            labels/

  build-frontend:
    runs-on: ubuntu-latest
      
    steps:
      - name: checkout repository
        uses: actions/checkout@v4


      - name: install yarn
        run: yarn install --immutable
        working-directory: frontend

      - name: build
        run: yarn build
        working-directory: frontend

        
        
      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: FRONTEND
          path: frontend
            


  release-artifacts:
    permissions:
      contents: write
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    steps:

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/

      - name: Move dist
        run: mkdir temp-frontend && mv artifacts/dist/ temp-frontend/ && mkdir temp-labels && mv artifacts/labels temp-labels/
      
        
      - name: zip artifacts
        uses: vimtor/action-zip@v1.2
        with:
          files: temp-labels/ artifacts/target/release/inventorize temp-frontend/
          dest: inventorize.zip

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          #tag: "test"
          #tag: ${{ env.TAG }}
          tag: ${{ github.ref_name }}
          artifacts: "inventorize.zip"
          prerelease: false
          body: "pre release, do not use"